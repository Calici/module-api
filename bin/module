#!/usr/bin/env python
import argparse
import pathlib
import os
from module_api.cmd.base import \
    exec_handlers, \
    HandlerMapT, \
    ModuleLock
from module_api.cmd import *
from typing_extensions import List

HANDLERS : HandlerMapT = {
    # Initialization
    'init.workdir' : InitWorkdirHandler,
    'init.manifest' : InitManifestHandler, 
    'init.docker' : InitDockerHandler, 
    'init.dir' : InitDir,
    "init.lock" : InitLock,
    'init' : [ 
        "init.lock",
        'init.manifest', 
        'init.workdir', 
        'init.docker', 
        'init.dir' 
    ],
    # Testing
    "test.add" : ["test.refresh", MakeTest],
    "test.all" : ["test.refresh", TestAll],
    "test.list" : ["test.refresh", TestList],
    "test.refresh" : TestRefresh,

    # Container
    "container.build" : BuildDocker, 
    "container.run" : RunDocker, 

    # Update and Lock
    'refresh.lock' : [
        "test.refresh",
    ]
}

MAX_FIND_DEPTH = 10;
available_actions = [ ' '.join(key.split('.')) for key in HANDLERS.keys() ]

def chain_actions(action : List[str]) -> str:
    return '.'.join(action)

def try_find_lock(
    root : pathlib.Path, depth : int = MAX_FIND_DEPTH
) -> pathlib.Path:
    lock_path = root / 'module.lock'
    if lock_path.exists(): return lock_path
    elif depth != 0: return try_find_lock(root.parent, depth - 1)
    raise FileNotFoundError

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "action", nargs = '*', type = str, 
        help = ', '.join(available_actions)
    )
    args = parser.parse_args()

    action = chain_actions(args.action)
    
    if len(action) == 0:
        raise RuntimeError("No action have been provided")

    try:
        lock_path = try_find_lock(pathlib.Path(os.getcwd()))
    except FileNotFoundError:
        lock_path = pathlib.Path(os.getcwd(), 'module.lock')
    resolved_lock_path = lock_path.resolve()
    lock = ModuleLock(resolved_lock_path)
    if resolved_lock_path.parent != lock.module.root_dir.get():
        lock.set(module = { 'root_dir' : resolved_lock_path.parent })
    lock.save()
    
    if action not in HANDLERS:
        raise RuntimeError("{0} is not part of {1}".format(
            action, HANDLERS.keys()
        ))
    exec_handlers(HANDLERS, action, lock)