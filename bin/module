#!/usr/bin/env python
import argparse
import pathlib
import os
from typing_extensions import Dict, Type, Union, List
from module_api.cmd.base import \
    ActionHandler, \
    make_action, \
    exec_handlers
from module_api.cmd.init_workdir import InitWorkdirHandler
from module_api.cmd.init_manifest import InitManifestHandler
from module_api.cmd.init_docker import InitDockerHandler
from module_api.cmd.init_dir import InitDir
from module_api.cmd.build_docker import BuildDocker
from module_api.cmd.run_docker import RunDocker

HANDLERS : Dict[str, Union[Type[ActionHandler], List[str]]] = {
    'init.workdir' : InitWorkdirHandler,
    'init.manifest' : InitManifestHandler, 
    'init.docker' : InitDockerHandler, 
    'init.dir' : InitDir,
    'init' : [ 'init.manifest', 'init.workdir', 'init.docker', 'init.dir' ],
    "build" : BuildDocker, 
    'run' : RunDocker
}

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("action", nargs = '*', type = str)
    args = parser.parse_args()
    action : List[str] = args.action
    
    if len(action) > 2:
        raise RuntimeError("Only a maximum of two actions is allowed")

    action1 = action[0] if 0 < len(action) else None
    action2 = action[1] if 1 < len(action) else None

    concat_action = make_action(action1, action2)

    manifest = pathlib.Path(os.getcwd(), 'manifest.json')
    workdir = pathlib.Path(os.getcwd(), 'src')
    
    if concat_action not in HANDLERS:
        raise RuntimeError("{0} is not part of {1}".format(
            concat_action, HANDLERS.keys()
        ))

    exec_handlers(HANDLERS, concat_action, manifest, workdir)